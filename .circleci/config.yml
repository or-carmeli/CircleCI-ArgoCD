version: 2.1

jobs:
  build-and-deploy:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout

      # Set up Docker environment
      - setup_remote_docker:
          docker_layer_caching: true

      # Install Python packages
      - run:
          name: Install Python and Pytest
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip
            pip3 install --user --upgrade pip
            pip3 install --user pytest requests

      # Install kubectl (ensure the installation can be done without root privileges)
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Install Helm (similarly ensure no root privileges needed)
      - run:
          name: Install Helm
          command: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh

      # Install AWS CLI (without requiring root privileges)
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --user awscli

      # Verify AWS CLI Installation
      - run:
          name: Verify AWS CLI Installation
          command: aws --version

      # Configure AWS
      - run:
          name: Configure AWS
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}' >> $BASH_ENV
            echo 'export AWS_REGION="us-east-1"' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install Docker Compose
          command: |
            sudo apt-get update
            sudo apt-get install -y docker-compose
      - run:
          name: List directory contents
          command: |
            ls -al
            pwd

      - run:
          name: Build Services
          command: |
            docker-compose build

      - run:
          name: Start Services
          command: |
            docker-compose up
      - run:
          name: Execute Tests
          command: |
            docker-compose run test
      - run:
          name: View Logs if Tests Fail
          command: |
            docker-compose logs app
          when: on_fail
      - run:
          name: Cleanup
          command: |
            docker-compose down

      # Push Image to Docker Hub
      - run:
          name: Login to Docker Hub
          command: echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin

      - run:
          name: Push Image
          command: docker push myapp/weather_app:${CIRCLE_BUILD_NUM}

      # Update kubeconfig
      - run:
          name: Update kubeconfig
          command: |
            aws eks update-kubeconfig --region ${AWS_REGION} --name my-cluster

      - run:
          name: List directory contents
          command: |
            ls -al
            pwd

      # Deploy using Helm
      - run:
          name: Deploy with Helm
          command: |
            set +e # Allow the next command to fail without exiting the script
            helm list -q | grep -q "^myapp-release$"
            if [ $? -eq 0 ]; then
              echo "Release exists, upgrading..."
              helm upgrade myapp-release ./myweatherapp/ --set image.tag=${CIRCLE_BUILD_NUM}
            else
              echo "Release does not exist, installing..."
              helm install myapp-release ./myweatherapp/ --set image.tag=${CIRCLE_BUILD_NUM}
            fi
            set -e # Revert back to exit on error

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-deploy
