version: 2.1

jobs:
  build-and-deploy:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout

      # Set up Docker environment
      - setup_remote_docker:
          docker_layer_caching: true

      # Install Python packages
      - run:
          name: Install Python and Pytest
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            pip3 install --user --upgrade pip
            pip3 install --user pytest requests

      # Install kubectl
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Install Helm
      - run:
          name: Install Helm
          command: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh

      # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --user awscli

      # Verify AWS CLI Installation
      - run:
          name: Verify AWS CLI Installation
          command: aws --version

      # Configure AWS
      - run:
          name: Configure AWS
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}' >> $BASH_ENV
            echo 'export AWS_REGION="us-east-1"' >> $BASH_ENV
            source $BASH_ENV

      # Create custom Docker network
      - run:
          name: Create custom Docker network
          command: docker network create mynetwork

      # Build Docker image
      - run:
          name: Build Docker image
          command: docker build -t myweatherapp:latest .

      # Tag Docker image for Docker Hub
      - run:
          name: Tag Docker image for Docker Hub
          command: docker tag myweatherapp:latest $DOCKERHUB_USER/myweatherapp:latest

      # Start Flask application
      - run:
          name: Start Flask application
          command: docker run -d -p 5000:5000 --network=mynetwork --name flask_container myweatherapp:latest

      # Run tests and save the result to a file
      - run:
          name: Run reachability test and save result
          command: |
            set +e
            docker run --network=mynetwork myweatherapp:latest python3 test_app.py
            TEST_EXIT_STATUS=$?
            echo $TEST_EXIT_STATUS > test_result.txt
            set -e
            if [ "$TEST_EXIT_STATUS" -ne 0 ]; then
                exit $TEST_EXIT_STATUS
            fi

      # Notify Discord about test results
      - run:
          name: Send test results to Discord
          command: |
            TEST_RESULT=$(cat test_result.txt)
            if [ "$TEST_RESULT" == "0" ]; then
                MESSAGE_CONTENT="Success! Tests passed for job $CIRCLE_JOB. See details at $CIRCLE_BUILD_URL."
            else
                MESSAGE_CONTENT="Failure! Tests failed for job $CIRCLE_JOB. Check $CIRCLE_BUILD_URL for more details."
            fi
            curl -X POST -H "Content-Type: application/json" -d '{"content":"'"$MESSAGE_CONTENT"'"}' $DISCORD_WEBHOOK

      # Login to Docker Hub and push the image
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKERHUB_PASS" | docker login -u $DOCKERHUB_USER --password-stdin

      - run:
          name: Push Docker Image to Docker Hub
          command: docker push $DOCKERHUB_USER/myweatherapp:latest

      # Cleanup
      - run:
          name: Stop Flask application
          command: docker stop flask_container

      # Update kubeconfig
      - run:
          name: Update kubeconfig
          command: |
            aws eks update-kubeconfig --region ${AWS_REGION} --name my-cluster

      - run:
          name: List directory contents
          command: ls -al

      # Deploy using Helm
      - run:
          name: Deploy with Helm
          command: |
            #Make sure Kubernetes context is set correctly
            aws eks update-kubeconfig --region ${AWS_REGION} --name my-cluster

            # Helm upgrade or install
            helm upgrade --install myapp-release ./path/to/your/helm/chart \
              --namespace your-namespace \
              --set image.repository=$DOCKERHUB_USER/myweatherapp \
              --set image.tag=latest \
              --wait
        
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-deploy

