version: 2.1

jobs:
  build-and-deploy:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout

      # Set up Docker environment
      - setup_remote_docker:
          docker_layer_caching: true

      # Install Python packages
      - run:
          name: Install Python and Pytest
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip
            pip3 install --user --upgrade pip
            pip3 install --user pytest requests

      # Install kubectl (ensure the installation can be done without root privileges)
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Install Helm (similarly ensure no root privileges needed)
      - run:
          name: Install Helm
          command: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh

      # Install AWS CLI (without requiring root privileges)
      - run:
          name: Install AWS CLI
          command: |
            pip3 install --user awscli

      # Verify AWS CLI Installation
      - run:
          name: Verify AWS CLI Installation
          command: aws --version

      # Configure AWS
      - run:
          name: Configure AWS
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}' >> $BASH_ENV
            echo 'export AWS_REGION="us-east-1"' >> $BASH_ENV
            source $BASH_ENV


      # Step 1: Build the Docker image with CIRCLE_BUILD_NUM tag
      - run:
          name: Build Docker Image
          command: docker build -t orcarmeli/myweatherapp:${CIRCLE_BUILD_NUM} .


      # Step 2: Run the Flask app in a container
      - run:
          name: Run Flask App
          command: |
            docker run -d -p 5000:5000 --name flask-app orcarmeli/myweatherapp:${CIRCLE_BUILD_NUM}
            # ss -tupln

      # Step 3: Wait for the Flask app to be ready
      - run:
          name: Wait for Flask App
          command: |
            echo "Waiting for the Flask app to start..."
            max_attempts=30
            count=0
            while ! curl --fail --silent --show-error http://localhost:5000; do
                count=$((count+1))
                if [ "$count" -lt "$max_attempts" ]; then
                    echo "Attempt $count: Flask app not ready yet, retrying in 1 second..."
                    sleep 1
                else
                    echo "Failed to connect to Flask app after $max_attempts attempts."
                    echo "Diagnosing with verbose output:"
                    curl --verbose http://localhost:5000
                    echo "Exiting due to failure in connecting to Flask app."
                    exit 1
                fi
            done
            echo "Flask app is up and running."

      # Step 4: Execute tests
      - run:
          name: Run Tests
          command: |
            # Assuming tests are part of your repository and can be run locally
            # Adjust this command based on how you run your tests
            sleep 10
            python3 -m unittest

      # Step 5: Push the Docker image if tests succeed
      - run:
          name: Push Docker Image
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push orcarmeli/myweatherapp:${CIRCLE_BUILD_NUM}
          when: on_success

      # Step 6: Cleanup
      - run:
          name: Cleanup
          command: docker stop flask-app

      # Update kubeconfig
      - run:
          name: Update kubeconfig
          command: |
            aws eks update-kubeconfig --region ${AWS_REGION} --name my-cluster

      - run:
          name: List directory contents
          command: |
            ls -al
            pwd

      # Deploy using Helm
      - run:
          name: Deploy with Helm
          command: |
            set +e # Allow the next command to fail without exiting the script
            helm list -q | grep -q "^myapp-release$"
            if [ $? -eq 0 ]; then
              echo "Release exists, upgrading..."
              helm upgrade myapp-release ./myweatherapp/ --set image.tag=${CIRCLE_BUILD_NUM}
            else
              echo "Release does not exist, installing..."
              helm install myapp-release ./myweatherapp/ --set image.tag=${CIRCLE_BUILD_NUM}
            fi
            set -e # Revert back to exit on error

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-deploy

